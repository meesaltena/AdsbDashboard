@page "/"

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@using AdsbMudBlazor.Models
@using System.Text.Json
@using AdsbMudBlazor.Service
@using AdsbMudBlazor.Utility
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject FeederService feederService
@inject IFlightFetcher flightFetcher
@inject ICoordUtils coordUtils

<MyMudProviders />

<PageTitle>Current flights</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Current flights</MudText>


@if (flights == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <CurrentlyTracked/>

    <MudTable Items="flights" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Flight, object>(x=>x.ModeS)">ICAO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Callsign)">Callsign</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Alt)">Altitude (ft.)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Squawk)">Squawk</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.DateTime)">DateTime</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Lat)">Lat</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Long)">Long</MudTableSortLabel></MudTh>
            @* <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" T="double">Distance</MudTableSortLabel></MudTh> *@
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Distance)">Distance</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ICAO">
                <MudLink Href="@($"https://www.planespotters.net/hex/{context.ModeS}")">@context.ModeS</MudLink>
            </MudTd>
            <MudTd DataLabel="Callsign">
                <MudLink Href="@($"http://www.flightradar24.com/{context.Callsign}")">@context.Callsign</MudLink>
            </MudTd>
            <MudTd DataLabel="Altitude (ft.)">@context.Alt</MudTd>
            <MudTd DataLabel="Squawk">@context.Squawk</MudTd>
            <MudTd DataLabel="Squawk">@context.DateTime</MudTd>
            <MudTd DataLabel="Lat">@context.Lat</MudTd>
            <MudTd DataLabel="Long">@context.Long</MudTd>
            @* <MudTd DataLabel="Long">@GetDistanceToFlight(@context)</MudTd> *@
            <MudTd DataLabel="Long">@context.Distance</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<Flight> flights;


    protected override async Task OnInitializedAsync()
    {
        flights = await flightFetcher.GetFlightsFromFeederAsync();
    }

    // private double GetDistanceToFlight(Flight flight)
    // {
    //     if (flight.Lat != 0 && 
    //         flight.Long != 0)
    //     {
    //         return coordUtils.GetDistance(
    //             feederService.FeederLat,
    //             feederService.FeederLong,
    //             flight.Lat,
    //             flight.Long);
    //     }
    //     return Double.NaN;
    // }
}
