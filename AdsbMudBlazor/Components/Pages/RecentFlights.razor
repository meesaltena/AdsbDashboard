@page "/recentflights"
@using AdsbMudBlazor.Models
@using System.Text.Json
@using AdsbMudBlazor.Service
@using AdsbMudBlazor.Utility
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject FlightsService flightsService

<MyMudProviders />

<PageTitle>Recent flights</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Recent flights</MudText>
<MudText>Flights seen within the last minutes</MudText>
<MudTimePicker TimeChanged="@OnTimeChanged" Time="@selectedTimeSpan" />

@if (flights == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <CurrentlyTracked />
    <MudTable Items="@flights" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Flight, object>(x=>x.ModeS)">ICAO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Callsign)">Callsign</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Alt)">Altitude (ft.)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Squawk)">Squawk</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.DateTime)">DateTime</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Lat)">Lat</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Long)">Long</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=> {if(x.Lat != 0 && x.Long != 0){return x.DistanceKm;} else return 0;})">Distance (km)</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ICAO">
                <MudLink Href="@($"https://www.planespotters.net/hex/{context.ModeS}")">@context.ModeS</MudLink>
            </MudTd>
            <MudTd DataLabel="Callsign">
                <MudLink Href="@($"http://www.flightradar24.com/{context.Callsign}")">@context.Callsign</MudLink>
            </MudTd>
            <MudTd DataLabel="Altitude (ft.)">@context.Alt</MudTd>
            <MudTd DataLabel="Squawk">@context.Squawk</MudTd>
            <MudTd DataLabel="Squawk">@context.DateTime</MudTd>
            <MudTd DataLabel="Lat">@context.Lat</MudTd>
            <MudTd DataLabel="Long">@context.Long</MudTd>
            <MudTd DataLabel="Distance">
                @String.Format("{0:0.#}", context.DistanceKm)
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<Flight> flights;
    private TimeSpan? selectedTimeSpan { get; set; } = TimeSpan.FromMinutes(5);

    protected override async Task OnInitializedAsync()
    {
        flights = await flightsService.GetRecentFlightsAsync(selectedTimeSpan ?? TimeSpan.FromMinutes(5));
    }

    private async Task OnTimeChanged(TimeSpan? value)
    {
        selectedTimeSpan = value;
        flights = await flightsService.GetRecentFlightsAsync(selectedTimeSpan ?? value ?? TimeSpan.FromMinutes(5));
    }
}
