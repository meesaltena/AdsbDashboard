@page "/recentplanes"
@using AdsbMudBlazor.Models
@using System.Text.Json
@using AdsbMudBlazor.Service
@using AdsbMudBlazor.Utility
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject FlightsService flightsService
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<MyMudProviders />
<PageTitle>Recent planes</PageTitle>
<CurrentlyTracked />


@if (planes == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="@planes" Hover="true" SortLabel="Sort By"

              Filter="new Func<Plane,bool>(FilterFunc)"
              Dense="true"
              @ref="_tableRef"
              Elevation="0">
        <ToolBarContent>
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-2" >
                <MudText Typo="Typo.h5"  Class="mt-3 pr-10" GutterBottom="true">Recent planes</MudText>
                <MudTimePicker Style="max-width:150px;margin-bottom: 20px;" Label="Seen within the last minutes:" Class="" TimeChanged="@OnTimeChanged" Time="@selectedTimeSpan" />
                <MudSwitch Class="mt-5" @bind-Value="@ShowOnlyValidDistance" Size="Size.Small" Label="Show valid distance only" Color="Color.Info" />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudContainer>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Plane, object>(x=>x.ModeS)">ICAO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Plane, object>(x=>x.LastSeen)">Last seen</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="MudImage">Image</MudTableSortLabel></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="ICAO">
                <MudLink Href="@($"https://www.planespotters.net/hex/{context.ModeS}")">@context.ModeS</MudLink>
            </MudTd>
            <MudTd DataLabel="Last seen">@context.LastSeen</MudTd>
            <MudTd DataLabel="Image">
                <PlaneImage Hex="@context.ModeS"></PlaneImage>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" OnClick="@((args) => _tableRef?.ExpandAllGroups())">Expand all groups</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3 ml-3" OnClick="@((args) => _tableRef?.CollapseAllGroups())">Collapse all groups</MudButton>

}

@code {
    private MudTable<Plane> _tableRef;
    private TableGroupDefinition<Plane> _groupDefinition = new()
        {
            GroupName = "Plane",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.ModeS
        };


    public bool ShowOnlyValidDistance { get; set; } = true;
    private  List<Plane> planes
    {
        get { return GetRecentPlanes(); }
    }
    private TimeSpan? selectedTimeSpan { get; set; } = TimeSpan.FromMinutes(5);

    private string searchString1 = "";

    private bool FilterFunc(Plane plane) => FilterFunc(plane, searchString1);
    private bool FilterFunc(Plane element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ModeS.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OnTimeChanged(TimeSpan? value)
    {
        selectedTimeSpan = value;
        await Task.FromResult(Task.CompletedTask);
    }

    // private async Task<IEnumerable<Plane>> GetFlights()
    private List<Plane> GetRecentPlanes()
    {
        // return await flightsService.GetRecentFlightsAsync(selectedTimeSpan ?? TimeSpan.FromMinutes(5));
        // return flightsService.GetFlightsQueryable().Where(f => f.DateTime > DateTime.UtcNow.Subtract(selectedTimeSpan ?? TimeSpan.FromMinutes(5)));
        return flightsService.GetRecentDistinctPlanes(selectedTimeSpan ?? TimeSpan.FromMinutes(5));

        // return f.Where(f => (ShowOnlyValidDistance == true
        //     ?
        //     ((f.DistanceKm != Double.MaxValue) && f.Distance != 0 && f.Distance != null)
        //     : true));
        // DateTime oldest = DateTime.UtcNow.Subtract(timeSpan);

    }
}
