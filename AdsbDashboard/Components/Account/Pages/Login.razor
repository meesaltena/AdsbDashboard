@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using AdsbDashboard.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
<MyMudProviders />
<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h6">Log in</MudText>
<br />
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Elevation="4" Class="pa-4">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudText>Use a local account to log in.</MudText>
                <br />
                <br />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <MudInputLabel for="email" class="form-label">Email</MudInputLabel>
                    <InputText type="email" @bind-Value="Input.Email"
                               class="form-control input-email"
                               autocomplete="username"
                               aria-required="true"
                               placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <MudInputLabel for="password" class="form-label">Password</MudInputLabel>
                    <InputText type="password" @bind-Value="Input.Password"
                               class="form-control input-password"
                               autocomplete="current-password"
                               aria-required="true"
                               placeholder="●●●●●●●●" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <br />
                <label class="form-label remember-me-label" for="RememberPasswordCheckbox">
                    <InputCheckbox id="RememberPasswordCheckbox" @bind-Value="Input.RememberMe" class="remember-me-checkbox" />
                    Remember me
                </label>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto ">Log in</MudButton>
                </div>
                <div>
                    <p>
                        <MudLink href="Account/ForgotPassword">Forgot your password?</MudLink>
                    </p>
                    <p>
                        <MudLink href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            Register as a new user
                        </MudLink>
                    </p>
                    <p>
                        <MudLink href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
                    </p>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>
<style>
    .remember-me-div {
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 60%;
        padding: 10px;
    }

    input[type="email"]::placeholder {
        font-size: 12px;
        opacity: 0.6;

    }

    input[type="password"]::placeholder {
        font-size: 12px;
        opacity: 0.6;
    }


    input[type=checkbox] {
        vertical-align: middle;
        position: relative;
        bottom: 1px;
    }

    label {
        display: block;
    }
</style>


@code {
    bool showPassword;

    void ButtonTestclick()
    {
        Console.WriteLine("Clicked!");
        showPassword = !showPassword;
    }

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
