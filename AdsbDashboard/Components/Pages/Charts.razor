@page "/charts"
@using AdsbDashboard.Models
@using System.Text.Json
@using AdsbDashboard.Service
@using AdsbDashboard.Utility
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject FlightsService flightsService
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<MyMudProviders />
<PageTitle>Charts</PageTitle>
<CurrentlyTracked />

@if (loading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div>
        <MudTimePicker Style="max-width:150px;margin-bottom: 20px;" TimeEditMode="TimeEditMode.OnlyHours" AmPm="false" Label="Timespan:" TimeFormat="HH" TimeChanged="@OnTimeChanged" Time="@selectedTimeSpan" />
        @* <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Outlined="true" Elevation="0"> *@
            <MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="@GetXAxisLabels()" ChartOptions="@_options"></MudChart>
        @* </MudPaper> *@
    </div>
}

@code {
    private readonly List<ChartSeries> _series = new();
    DateTime SelectedDate = DateTime.UtcNow;
    bool loading = true;
    private readonly ChartOptions _options = new()
        {
            XAxisLines = true,
    };

    private string[] GetXAxisLabels()
    {
        var j = Enumerable.Range(0, 24).Select(i => $"{i.ToString()}H").ToArray();
        return j;
    }

    private TimeSpan? selectedTimeSpan { get; set; } = TimeSpan.FromDays(1);

    private async Task OnTimeChanged(TimeSpan? value)
    {
        selectedTimeSpan = value;
        await UpdateChart();
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateChart();
    }

    private async Task UpdateChart()
    {
        var planes = await GetRecentPlanesAsync();
        // double[] counts = Enumerable.Range(0, 24)
        //                             .Select(i => Convert.ToDouble(planes
        //                                 .Count(f => f.LastSeen >= SelectedDate.AddHours(-i - 1) && f.LastSeen < SelectedDate.AddHours(-i)))).ToArray();

        double[] counts = new double[selectedTimeSpan.Value.Hours];
        try
        {
            foreach (var h in Enumerable.Range(0, selectedTimeSpan.Value.Hours))
            {
                counts[h] = planes.Count(o => o.LastSeen.GetValueOrDefault().Hour == h);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        ChartSeries cs = new ChartSeries { Name = "Count", Data = counts };
        _series.Clear();
        _series.Add(cs);
        loading = false;
        _options.LineStrokeWidth = 2;
        StateHasChanged();
    }

    private async Task<IEnumerable<Flight>> GetRecentFlightsAsync()
    {
        return await flightsService.GetRecentFlightsAsync(selectedTimeSpan ?? TimeSpan.FromDays(1));
    }

    private async Task<IEnumerable<Plane>> GetRecentPlanesAsync()
    {
        return await flightsService.GetRecentDistinctPlanesAsync(selectedTimeSpan ?? TimeSpan.FromDays(1));

    }
}
