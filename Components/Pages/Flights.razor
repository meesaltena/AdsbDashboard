@page "/flights"
@using AdsbMudBlazor.Models
@using System.Text.Json
@using AdsbMudBlazor.Service
@rendermode InteractiveServer
@inject FeederService feederService

<MyMudProviders />

<PageTitle>Flights </PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Current flights</MudText>


@if (flights == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudText Class="mb-8">Total flights currently being tracked by
        <MudLink Href="@($"https://www.flightradar24.com/account/feed-stats/?id={feederService.FeederId}")">@feederService.FeederName</MudLink>: @flights.Count()
    </MudText>

    <MudTable Items="flights" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Flight, object>(x=>x.ModeS)">ICAO</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Callsign)">Callsign</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Alt)">Altitude (ft.)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Squawk)">Squawk</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Lat)">Lat</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Flight, object>(x=>x.Long)">Long</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ICAO">
                <MudLink Href="@($"https://www.planespotters.net/hex/{context.ModeS}")">@context.ModeS</MudLink>
            </MudTd>
            <MudTd DataLabel="Callsign">
                <MudLink Href="@($"http://www.flightradar24.com/{context.Callsign}")">@context.Callsign</MudLink>
            </MudTd>
            <MudTd DataLabel="Altitude (ft.)">@context.Alt</MudTd>
            <MudTd DataLabel="Squawk">@context.Squawk</MudTd>
            <MudTd DataLabel="Lat">@context.Lat</MudTd>
            <MudTd DataLabel="Long">@context.Long</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<Flight> flights;
    private static readonly HttpClient client = new();

    protected override async Task OnInitializedAsync()
    {
      
        flights = await GetFlightsFromFeeder();
    }
    
    public async Task<IEnumerable<Flight>> GetFlightsFromFeeder()
    {
        var response = await client.GetStringAsync(feederService.FeederUrl);

        var document = JsonDocument.Parse(response);
        var root = document.RootElement;

        List<Flight> flights = new List<Flight>();
        foreach (var property in root.EnumerateObject())
        {
            var flightData = property.Value;
            var flight = new Flight
                {
                    ModeS = flightData[0].GetString(),
                    Callsign = flightData[16].GetString(),
                    Lat = flightData[1].GetDouble().ToString(),
                    Long = flightData[2].GetDouble().ToString(),
                    Alt = flightData[4].GetInt32().ToString(),
                    Squawk = flightData[6].GetString()
                };
            flights.Add(flight);

            //_logger.LogInformation($"ModeS: {flight.ModeS}, Callsign: {flight.Callsign}, Lat: {flight.Lat}, Long: {flight.Long}, Alt: {flight.Alt}, SQW: {flight.Squawk}");
        }

        return flights;
    }
}
